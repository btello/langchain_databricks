# Databricks notebook source
# MAGIC %md
# MAGIC # Memory

# COMMAND ----------

from langchain.chat_models import ChatDatabricks
from langchain_core.messages import HumanMessage

llm = ChatDatabricks(
    target_uri="databricks",
    endpoint="databricks-llama-2-70b-chat",
    temperature=0.1,
)

# COMMAND ----------

from langchain.chat_models import ChatOpenAI
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory

# COMMAND ----------

memory = ConversationBufferMemory()
conversation = ConversationChain(
    llm=llm, 
    memory = memory,
    verbose=False 
)

# COMMAND ----------

conversation.predict(input="Hi, today is Tuesday")

# COMMAND ----------

conversation.predict(input="what is 1+1?")

# COMMAND ----------

conversation.predict(input="what is today?")

# COMMAND ----------

print(memory.buffer)

# COMMAND ----------

memory.load_memory_variables({})

# COMMAND ----------

# DBTITLE 1,Creating memories
memory = ConversationBufferMemory()

memory.save_context({"input": "Hi!"},{"output":"What's up?"})

# COMMAND ----------

print(memory.buffer)

# COMMAND ----------

memory.save_context({"input": "Not much, just hanging"}, 
                    {"output": "Cool"})

# COMMAND ----------

print(memory.buffer)

# COMMAND ----------

memory.load_memory_variables({})

# COMMAND ----------

# MAGIC %md
# MAGIC As the conversation buffer memory grows, the cost of sending queries to the LLM grows as well (you also start to hit token limits eventually)

# COMMAND ----------

# DBTITLE 1,Different types of memory
from langchain.memory import ConversationBufferWindowMemory

memory = ConversationBufferWindowMemory(k=1)

memory.save_context({"input": "Hi"},
                    {"output": "What's up"})
memory.save_context({"input": "Not much, just hanging"},
                    {"output": "Cool"})

# COMMAND ----------

# MAGIC %md
# MAGIC Setting `k=1` tells the memory to only store a single "back and forth" between the user and the AI

# COMMAND ----------

print(memory.load_memory_variables({}))

# COMMAND ----------

memory = ConversationBufferWindowMemory(k=2)
conversation = ConversationChain(
    llm=llm, 
    memory = memory,
    verbose=True
)

# COMMAND ----------

conversation.predict(input ="today is Wednesday")

# COMMAND ----------

conversation.predict(input="what is 1+1?")

# COMMAND ----------

conversation.predict(input="what is today's day?")

# COMMAND ----------

# DBTITLE 1,Limiting memory by tokens
from langchain.memory import ConversationTokenBufferMemory
from langchain.llms import OpenAI

llm = ChatDatabricks(
    target_uri="databricks",
    endpoint="databricks-llama-2-70b-chat",
    temperature=0.1,
)

memory = ConversationTokenBufferMemory(llm=llm, max_token_limit=50)
memory.save_context({"input": "AI is what?!"},
                    {"output": "Amazing!"})
memory.save_context({"input": "Backpropagation is what?"},
                    {"output": "Beautiful!"})
memory.save_context({"input": "Chatbots are what?"}, 
                    {"output": "Charming!"})

# COMMAND ----------

memory.load_memory_variables({})

# COMMAND ----------

# DBTITLE 1,Store history as a summary generated by an LLM
from langchain.memory import ConversationSummaryBufferMemory

# COMMAND ----------

# create a long string
schedule = "There is a meeting at 8am with your product team. \
You will need your powerpoint presentation prepared. \
9am-12pm have time to work on your LangChain \
project which will go quickly because Langchain is such a powerful tool. \
At Noon, lunch at the italian resturant with a customer who is driving \
from over an hour away to meet you to understand the latest in AI. \
Be sure to bring your laptop to show the latest LLM demo."

memory = ConversationSummaryBufferMemory(llm=llm, max_token_limit=25)
memory.save_context({"input": "Hello"}, {"output": "What's up"})
memory.save_context({"input": "Not much, just hanging"},
                    {"output": "Cool"})
memory.save_context({"input": "What is on the schedule today?"}, 
                    {"output": f"{schedule}"})

# COMMAND ----------

llm = ChatDatabricks(
    target_uri="databricks",
    endpoint="databricks-llama-2-70b-chat",
    temperature=0.1,
)

conversation = ConversationChain(
    llm=llm, 
    memory = memory,
    verbose=True
)

# COMMAND ----------

memory.load_memory_variables({})

# COMMAND ----------

conversation.predict(input="what would be a good demo to show?")

# COMMAND ----------

memory.load_memory_variables({})

# COMMAND ----------


